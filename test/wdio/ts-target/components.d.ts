/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
export namespace Components {
    interface ExtendedCmp {
        "method1": () => Promise<void>;
        "method2": () => Promise<void>;
        /**
          * @default 'ExtendedCmp text'
         */
        "prop1": string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2": string;
    }
    interface ExtendedCmpCmp {
        "method1": () => Promise<void>;
        "method2": () => Promise<void>;
        /**
          * @default 'ExtendedCmp text'
         */
        "prop1": string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2": string;
    }
    interface ExtendsCmpCmp {
        "method1": () => Promise<void>;
        "method2": () => Promise<void>;
        /**
          * @default 'default text'
         */
        "prop1": string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2": string;
    }
    interface ExtendsExternal {
        "method1": () => Promise<void>;
        "method2": () => Promise<void>;
        /**
          * @default 'default text'
         */
        "prop1": string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2": string;
    }
    interface ExtendsMixin {
        "method1": () => Promise<void>;
        "method2": () => Promise<void>;
        /**
          * @default 'default text'
         */
        "prop1": string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2": string;
    }
    interface TsTargetProps {
        /**
          * @default 'basicProp'
         */
        "basicProp": string;
        "decoratedGetterSetterProp": number;
        /**
          * @default -10
         */
        "decoratedProp": number;
        "dynamicLifecycle": string[];
    }
}
declare global {
    interface HTMLExtendedCmpElement extends Components.ExtendedCmp, HTMLStencilElement {
    }
    var HTMLExtendedCmpElement: {
        prototype: HTMLExtendedCmpElement;
        new (): HTMLExtendedCmpElement;
    };
    interface HTMLExtendedCmpCmpElement extends Components.ExtendedCmpCmp, HTMLStencilElement {
    }
    var HTMLExtendedCmpCmpElement: {
        prototype: HTMLExtendedCmpCmpElement;
        new (): HTMLExtendedCmpCmpElement;
    };
    interface HTMLExtendsCmpCmpElement extends Components.ExtendsCmpCmp, HTMLStencilElement {
    }
    var HTMLExtendsCmpCmpElement: {
        prototype: HTMLExtendsCmpCmpElement;
        new (): HTMLExtendsCmpCmpElement;
    };
    interface HTMLExtendsExternalElement extends Components.ExtendsExternal, HTMLStencilElement {
    }
    var HTMLExtendsExternalElement: {
        prototype: HTMLExtendsExternalElement;
        new (): HTMLExtendsExternalElement;
    };
    interface HTMLExtendsMixinElement extends Components.ExtendsMixin, HTMLStencilElement {
    }
    var HTMLExtendsMixinElement: {
        prototype: HTMLExtendsMixinElement;
        new (): HTMLExtendsMixinElement;
    };
    interface HTMLTsTargetPropsElement extends Components.TsTargetProps, HTMLStencilElement {
    }
    var HTMLTsTargetPropsElement: {
        prototype: HTMLTsTargetPropsElement;
        new (): HTMLTsTargetPropsElement;
    };
    interface HTMLElementTagNameMap {
        "extended-cmp": HTMLExtendedCmpElement;
        "extended-cmp-cmp": HTMLExtendedCmpCmpElement;
        "extends-cmp-cmp": HTMLExtendsCmpCmpElement;
        "extends-external": HTMLExtendsExternalElement;
        "extends-mixin": HTMLExtendsMixinElement;
        "ts-target-props": HTMLTsTargetPropsElement;
    }
}
declare namespace LocalJSX {
    interface ExtendedCmp {
        /**
          * @default 'ExtendedCmp text'
         */
        "prop1"?: string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2"?: string;
    }
    interface ExtendedCmpCmp {
        /**
          * @default 'ExtendedCmp text'
         */
        "prop1"?: string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2"?: string;
    }
    interface ExtendsCmpCmp {
        /**
          * @default 'default text'
         */
        "prop1"?: string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2"?: string;
    }
    interface ExtendsExternal {
        /**
          * @default 'default text'
         */
        "prop1"?: string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2"?: string;
    }
    interface ExtendsMixin {
        /**
          * @default 'default text'
         */
        "prop1"?: string;
        /**
          * @default 'ExtendedCmp prop2 text'
         */
        "prop2"?: string;
    }
    interface TsTargetProps {
        /**
          * @default 'basicProp'
         */
        "basicProp"?: string;
        "decoratedGetterSetterProp"?: number;
        /**
          * @default -10
         */
        "decoratedProp"?: number;
        "dynamicLifecycle"?: string[];
    }
    interface IntrinsicElements {
        "extended-cmp": ExtendedCmp;
        "extended-cmp-cmp": ExtendedCmpCmp;
        "extends-cmp-cmp": ExtendsCmpCmp;
        "extends-external": ExtendsExternal;
        "extends-mixin": ExtendsMixin;
        "ts-target-props": TsTargetProps;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "extended-cmp": LocalJSX.ExtendedCmp & JSXBase.HTMLAttributes<HTMLExtendedCmpElement>;
            "extended-cmp-cmp": LocalJSX.ExtendedCmpCmp & JSXBase.HTMLAttributes<HTMLExtendedCmpCmpElement>;
            "extends-cmp-cmp": LocalJSX.ExtendsCmpCmp & JSXBase.HTMLAttributes<HTMLExtendsCmpCmpElement>;
            "extends-external": LocalJSX.ExtendsExternal & JSXBase.HTMLAttributes<HTMLExtendsExternalElement>;
            "extends-mixin": LocalJSX.ExtendsMixin & JSXBase.HTMLAttributes<HTMLExtendsMixinElement>;
            "ts-target-props": LocalJSX.TsTargetProps & JSXBase.HTMLAttributes<HTMLTsTargetPropsElement>;
        }
    }
}
